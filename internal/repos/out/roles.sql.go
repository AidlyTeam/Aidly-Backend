// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package repo

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const roleByID = `-- name: RoleByID :one
SELECT
    r.id, r.name
FROM 
    t_roles as r
WHERE
    r.id = $1
`

func (q *Queries) RoleByID(ctx context.Context, roleID uuid.UUID) (TRole, error) {
	row := q.db.QueryRowContext(ctx, roleByID, roleID)
	var i TRole
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const roleByName = `-- name: RoleByName :one
SELECT
    r.id, r.name
FROM 
    t_roles as r
WHERE
    r.name = $1
`

func (q *Queries) RoleByName(ctx context.Context, roleName string) (TRole, error) {
	row := q.db.QueryRowContext(ctx, roleByName, roleName)
	var i TRole
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const roles = `-- name: Roles :many
SELECT
    r.id, r.name
FROM 
    t_roles as r
WHERE
    ($1::text IS NULL OR us.id = $1) AND
    ($2::text IS NULL OR name ILIKE '%' || $2::text || '%')
LIMIT $4 OFFSET $3
`

type RolesParams struct {
	ID   sql.NullString
	Name sql.NullString
	Off  int32
	Lim  int32
}

func (q *Queries) Roles(ctx context.Context, arg RolesParams) ([]TRole, error) {
	rows, err := q.db.QueryContext(ctx, roles,
		arg.ID,
		arg.Name,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TRole
	for rows.Next() {
		var i TRole
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
