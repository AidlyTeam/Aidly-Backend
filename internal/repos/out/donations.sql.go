// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: donations.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const countDonations = `-- name: CountDonations :one
SELECT 
    COUNT(*) 
FROM
    t_donations 
WHERE
    ($1::UUID IS NULL OR campaign_id = $1::UUID) AND
    ($2::UUID IS NULL OR user_id = $2::UUID)
`

type CountDonationsParams struct {
	CampaignID uuid.NullUUID
	UserID     uuid.NullUUID
}

func (q *Queries) CountDonations(ctx context.Context, arg CountDonationsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countDonations, arg.CampaignID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDonation = `-- name: CreateDonation :one
INSERT INTO t_donations
    (campaign_id, user_id, amount, donation_date, transaction_id)  
VALUES
    ($1, $2, $3, NOW(), $4)
RETURNING id
`

type CreateDonationParams struct {
	CampaignID    uuid.UUID
	UserID        uuid.UUID
	Amount        string
	TransactionID string
}

func (q *Queries) CreateDonation(ctx context.Context, arg CreateDonationParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createDonation,
		arg.CampaignID,
		arg.UserID,
		arg.Amount,
		arg.TransactionID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteDonation = `-- name: DeleteDonation :exec
DELETE FROM
    t_donations
WHERE
    id = $1
`

func (q *Queries) DeleteDonation(ctx context.Context, donationID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDonation, donationID)
	return err
}

const getDonationByID = `-- name: GetDonationByID :one
SELECT
    id, campaign_id, transaction_id, user_id, amount, donation_date 
FROM
    t_donations
WHERE
    id = $1
`

func (q *Queries) GetDonationByID(ctx context.Context, donationID uuid.UUID) (TDonation, error) {
	row := q.db.QueryRowContext(ctx, getDonationByID, donationID)
	var i TDonation
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.TransactionID,
		&i.UserID,
		&i.Amount,
		&i.DonationDate,
	)
	return i, err
}

const getDonations = `-- name: GetDonations :many
SELECT
    id, campaign_id, transaction_id, user_id, amount, donation_date 
FROM
    t_donations
WHERE
    ($1::UUID IS NULL OR id = $1::UUID) AND
    ($2::UUID IS NULL OR campaign_id = $2::UUID) AND
    ($3::UUID IS NULL OR user_id = $3::UUID)
LIMIT $5 OFFSET $4
`

type GetDonationsParams struct {
	ID         uuid.NullUUID
	CampaignID uuid.NullUUID
	UserID     uuid.NullUUID
	Off        int32
	Lim        int32
}

func (q *Queries) GetDonations(ctx context.Context, arg GetDonationsParams) ([]TDonation, error) {
	rows, err := q.db.QueryContext(ctx, getDonations,
		arg.ID,
		arg.CampaignID,
		arg.UserID,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TDonation
	for rows.Next() {
		var i TDonation
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.TransactionID,
			&i.UserID,
			&i.Amount,
			&i.DonationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
