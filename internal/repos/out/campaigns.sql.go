// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: campaigns.sql

package repo

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countCampaigns = `-- name: CountCampaigns :one
SELECT 
    COUNT(*) 
FROM 
    t_campaigns 
WHERE 
    ($1 IS NULL OR user_id = $1)
`

func (q *Queries) CountCampaigns(ctx context.Context, userID interface{}) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCampaigns, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO t_campaigns 
    (user_id, title, description, image_path, target_amount, raised_amount, start_date, end_date, created_at)
VALUES 
    ($1, $2, $3, $4, $5, DEFAULT, $6, $7, NOW())
RETURNING id
`

type CreateCampaignParams struct {
	UserID       uuid.UUID
	Title        string
	Description  sql.NullString
	ImagePath    sql.NullString
	TargetAmount string
	StartDate    sql.NullTime
	EndDate      sql.NullTime
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createCampaign,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.ImagePath,
		arg.TargetAmount,
		arg.StartDate,
		arg.EndDate,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM 
    t_campaigns
WHERE
    id = $1
`

func (q *Queries) DeleteCampaign(ctx context.Context, campaignID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCampaign, campaignID)
	return err
}

const getCampaignByID = `-- name: GetCampaignByID :one
SELECT 
    id, user_id, title, description, image_path, target_amount, raised_amount, start_date, end_date, created_at
FROM 
    t_campaigns
WHERE 
    id = $1
`

func (q *Queries) GetCampaignByID(ctx context.Context, campaignID uuid.UUID) (TCampaign, error) {
	row := q.db.QueryRowContext(ctx, getCampaignByID, campaignID)
	var i TCampaign
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.ImagePath,
		&i.TargetAmount,
		&i.RaisedAmount,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const getCampaigns = `-- name: GetCampaigns :many
SELECT 
    id, user_id, title, description, image_path, target_amount, raised_amount, start_date, end_date, created_at
FROM 
    t_campaigns
WHERE
    ($1::UUID IS NULL OR id = $1::UUID) AND
    ($2::UUID IS NULL OR user_id = $2::UUID)
LIMIT $4 OFFSET $3
`

type GetCampaignsParams struct {
	ID     uuid.NullUUID
	UserID uuid.NullUUID
	Off    int32
	Lim    int32
}

func (q *Queries) GetCampaigns(ctx context.Context, arg GetCampaignsParams) ([]TCampaign, error) {
	rows, err := q.db.QueryContext(ctx, getCampaigns,
		arg.ID,
		arg.UserID,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TCampaign
	for rows.Next() {
		var i TCampaign
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.ImagePath,
			&i.TargetAmount,
			&i.RaisedAmount,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCampaign = `-- name: UpdateCampaign :exec
UPDATE
    t_campaigns
SET
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    image_path = COALESCE($3, image_path),
    target_amount = COALESCE($4, target_amount),
    raised_amount = COALESCE($5, raised_amount),
    start_date = COALESCE($6, start_date),
    end_date = COALESCE($7, end_date)
WHERE
    id = $8
`

type UpdateCampaignParams struct {
	Title        string
	Description  sql.NullString
	ImagePath    sql.NullString
	TargetAmount string
	RaisedAmount sql.NullString
	StartDate    sql.NullTime
	EndDate      sql.NullTime
	CampaignID   uuid.UUID
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) error {
	_, err := q.db.ExecContext(ctx, updateCampaign,
		arg.Title,
		arg.Description,
		arg.ImagePath,
		arg.TargetAmount,
		arg.RaisedAmount,
		arg.StartDate,
		arg.EndDate,
		arg.CampaignID,
	)
	return err
}
