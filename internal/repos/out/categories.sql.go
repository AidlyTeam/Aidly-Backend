// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package repo

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countCategory = `-- name: CountCategory :one
SELECT 
    COUNT(*) 
FROM 
    t_categories
`

func (q *Queries) CountCategory(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO t_categories (name)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM t_categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT
    id, name
FROM
    t_categories
ORDER BY
    name
LIMIT $2 OFFSET $1
`

type GetCategoriesParams struct {
	Off int32
	Lim int32
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]TCategory, error) {
	rows, err := q.db.QueryContext(ctx, getCategories, arg.Off, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TCategory
	for rows.Next() {
		var i TCategory
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT
    id, name
FROM
    t_categories
WHERE
    id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id uuid.UUID) (TCategory, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, id)
	var i TCategory
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE t_categories
SET name = COALESCE($1, name)
WHERE id = $2
`

type UpdateCategoryParams struct {
	Name sql.NullString
	ID   uuid.UUID
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory, arg.Name, arg.ID)
	return err
}
