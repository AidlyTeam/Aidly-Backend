// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: badgets.sql

package repo

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countBadge = `-- name: CountBadge :one
SELECT
    COUNT(*)
FROM
    t_badges
WHERE
    ($1::UUID IS NULL OR id = $1::UUID)
`

func (q *Queries) CountBadge(ctx context.Context, id uuid.NullUUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBadge, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBadge = `-- name: CreateBadge :one
INSERT INTO t_badges 
    (name, description, icon_path)
VALUES 
    ($1, $2, $3)
RETURNING id
`

type CreateBadgeParams struct {
	Name        string
	Description sql.NullString
	IconPath    sql.NullString
}

func (q *Queries) CreateBadge(ctx context.Context, arg CreateBadgeParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createBadge, arg.Name, arg.Description, arg.IconPath)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteBadge = `-- name: DeleteBadge :exec
DELETE FROM 
    t_badges
WHERE
    id = $1
`

func (q *Queries) DeleteBadge(ctx context.Context, badgeID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBadge, badgeID)
	return err
}

const getBadgeByID = `-- name: GetBadgeByID :one
SELECT 
    id, name, description, icon_path, created_at
FROM 
    t_badges
WHERE 
    id = $1
`

func (q *Queries) GetBadgeByID(ctx context.Context, badgeID uuid.UUID) (TBadge, error) {
	row := q.db.QueryRowContext(ctx, getBadgeByID, badgeID)
	var i TBadge
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IconPath,
		&i.CreatedAt,
	)
	return i, err
}

const getBadges = `-- name: GetBadges :many
SELECT 
    id, name, description, icon_path, created_at
FROM 
    t_badges
WHERE
    ($1::UUID IS NULL OR id = $1::UUID)
LIMIT $3 OFFSET $2
`

type GetBadgesParams struct {
	ID  uuid.NullUUID
	Off int32
	Lim int32
}

func (q *Queries) GetBadges(ctx context.Context, arg GetBadgesParams) ([]TBadge, error) {
	rows, err := q.db.QueryContext(ctx, getBadges, arg.ID, arg.Off, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TBadge
	for rows.Next() {
		var i TBadge
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IconPath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBadge = `-- name: UpdateBadge :exec
UPDATE
    t_badges
SET
    name = COALESCE($1, name),
    description = COALESCE($2, description),
    icon_path = COALESCE($3, icon_path)
WHERE
    id = $4
`

type UpdateBadgeParams struct {
	Name        sql.NullString
	Description sql.NullString
	IconPath    sql.NullString
	BadgeID     uuid.UUID
}

func (q *Queries) UpdateBadge(ctx context.Context, arg UpdateBadgeParams) error {
	_, err := q.db.ExecContext(ctx, updateBadge,
		arg.Name,
		arg.Description,
		arg.IconPath,
		arg.BadgeID,
	)
	return err
}
