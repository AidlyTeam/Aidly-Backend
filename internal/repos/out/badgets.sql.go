// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: badgets.sql

package repo

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countBadge = `-- name: CountBadge :one
SELECT
    COUNT(*)
FROM
    t_badges
WHERE
    ($1::UUID IS NULL OR id = $1::UUID)
`

func (q *Queries) CountBadge(ctx context.Context, id uuid.NullUUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBadge, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBadge = `-- name: CreateBadge :one
INSERT INTO t_badges 
    (symbol, name, description, seller_fee, icon_path, uri, is_nft, donation_threshold)
VALUES 
    ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type CreateBadgeParams struct {
	Symbol            sql.NullString
	Name              string
	Description       sql.NullString
	SellerFee         sql.NullInt32
	IconPath          sql.NullString
	Uri               sql.NullString
	IsNft             bool
	DonationThreshold int32
}

func (q *Queries) CreateBadge(ctx context.Context, arg CreateBadgeParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createBadge,
		arg.Symbol,
		arg.Name,
		arg.Description,
		arg.SellerFee,
		arg.IconPath,
		arg.Uri,
		arg.IsNft,
		arg.DonationThreshold,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteBadge = `-- name: DeleteBadge :exec
DELETE FROM 
    t_badges
WHERE
    id = $1
`

func (q *Queries) DeleteBadge(ctx context.Context, badgeID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBadge, badgeID)
	return err
}

const existsBadgeByThreshold = `-- name: ExistsBadgeByThreshold :one
SELECT 
    EXISTS (
        SELECT 1 
        FROM t_badges 
        WHERE donation_threshold = $1 
    ) AS exists
`

func (q *Queries) ExistsBadgeByThreshold(ctx context.Context, donationThreshold int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsBadgeByThreshold, donationThreshold)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getBadgeByDonationCount = `-- name: GetBadgeByDonationCount :one
SELECT 
    id, symbol, name, description, seller_fee, icon_path, donation_threshold, uri, is_nft, created_at
FROM 
    t_badges
WHERE 
    donation_threshold = $1
`

func (q *Queries) GetBadgeByDonationCount(ctx context.Context, donationThreshold int32) (TBadge, error) {
	row := q.db.QueryRowContext(ctx, getBadgeByDonationCount, donationThreshold)
	var i TBadge
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.Description,
		&i.SellerFee,
		&i.IconPath,
		&i.DonationThreshold,
		&i.Uri,
		&i.IsNft,
		&i.CreatedAt,
	)
	return i, err
}

const getBadgeByID = `-- name: GetBadgeByID :one
SELECT 
    id, symbol, name, description, seller_fee, icon_path, donation_threshold, uri, is_nft, created_at
FROM 
    t_badges
WHERE 
    id = $1
`

func (q *Queries) GetBadgeByID(ctx context.Context, badgeID uuid.UUID) (TBadge, error) {
	row := q.db.QueryRowContext(ctx, getBadgeByID, badgeID)
	var i TBadge
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.Description,
		&i.SellerFee,
		&i.IconPath,
		&i.DonationThreshold,
		&i.Uri,
		&i.IsNft,
		&i.CreatedAt,
	)
	return i, err
}

const getBadges = `-- name: GetBadges :many
SELECT 
    id, symbol, name, description, seller_fee, icon_path, donation_threshold, uri, is_nft, created_at
FROM 
    t_badges
WHERE
    ($1::UUID IS NULL OR id = $1::UUID) AND
    ($2::BOOLEAN IS NULL OR is_nft = $2::BOOLEAN) AND
    ($3::INTEGER IS NULL OR donation_threshold = $3::INTEGER)
LIMIT $5 OFFSET $4
`

type GetBadgesParams struct {
	ID                uuid.NullUUID
	IsNft             sql.NullBool
	DonationThreshold sql.NullInt32
	Off               int32
	Lim               int32
}

func (q *Queries) GetBadges(ctx context.Context, arg GetBadgesParams) ([]TBadge, error) {
	rows, err := q.db.QueryContext(ctx, getBadges,
		arg.ID,
		arg.IsNft,
		arg.DonationThreshold,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TBadge
	for rows.Next() {
		var i TBadge
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Name,
			&i.Description,
			&i.SellerFee,
			&i.IconPath,
			&i.DonationThreshold,
			&i.Uri,
			&i.IsNft,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBadge = `-- name: UpdateBadge :exec
UPDATE
    t_badges
SET
    symbol = COALESCE($1, symbol),
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    seller_fee = COALESCE($4, seller_fee),
    icon_path = COALESCE($5, icon_path),
    uri = COALESCE($6, uri),
    is_nft = COALESCE($7, is_nft),
    donation_threshold = COALESCE($8, donation_threshold)
WHERE
    id = $9
`

type UpdateBadgeParams struct {
	Symbol            sql.NullString
	Name              sql.NullString
	Description       sql.NullString
	SellerFee         sql.NullInt32
	IconPath          sql.NullString
	Uri               sql.NullString
	IsNft             sql.NullBool
	DonationThreshold sql.NullInt32
	BadgeID           uuid.UUID
}

func (q *Queries) UpdateBadge(ctx context.Context, arg UpdateBadgeParams) error {
	_, err := q.db.ExecContext(ctx, updateBadge,
		arg.Symbol,
		arg.Name,
		arg.Description,
		arg.SellerFee,
		arg.IconPath,
		arg.Uri,
		arg.IsNft,
		arg.DonationThreshold,
		arg.BadgeID,
	)
	return err
}
